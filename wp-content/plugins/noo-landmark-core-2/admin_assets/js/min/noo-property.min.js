(function ( $ ) {
	'use strict';
	
	/**
	 * Create function get all field
	 */
	$.fn.get_all_field = function () {
	    var field = {};

	    $('input',this).each(function () { 
	        field[this.name] = $(this).val(); 
	    });
	    return $.param(field);
	}

	$(document).ready(function() {
		
		/**
		 * Process event when clicking submit button
		 */
			if ( $('.btn-property-submit').length > 0 ) {

				$('.btn-property-submit').each(function(index, el) {
				
					/**
					 * VAR
					 */
						var $$ = $(this);

						$$.on('click', function(event) {
							event.preventDefault();
							
							/**
							 * VAR
							 */
								var $_$     = $(this),
								id_form     = $_$.data('id-form'),
								id_notice   = $_$.data('id-notice');

							/**
							 * Process
							 */
								/**
								 * Remove disable field
								 */
									// $('#' + id_form).find('input, select, textarea').each(function(index, el) {
									// 	$(this).prop( "disabled", false );
									// });
									$( '#' + id_form + ' .noo-setting-item-field').each(function(index, el) {
							
										var $$ = $(this),
											div_input = $$.find('.noo-col-name > input[type="text"]'),
										    value_input = div_input.val();

										    /**
										     * Conver name input -> toLowerCase
										     */
										    	div_input.val( ( value_input.toLowerCase() ).replace( / /g, '_' ) );

										    	// console.log(div_input.val());

										if ( $$.hasClass('disable') ) {
											$$.find('input, select, textarea').each(function(index, el) {
												$(this).prop( "disabled", false );
											});
										}
									});

								/**
								 * Get data form field
								 */
									var data = $('#' + id_form).serializeArray();

									data.push(
										{
											'name' : 'action',
											'value' : 'property_settings'
										},
										{
											'name' : 'security',
											'value' : Noo_Property_Admin.security
										}
									);

								// console.log(data);

								$.ajax({
									url: Noo_Property_Admin.ajax_url,
									type: 'POST',
									dataType: 'html',
									data: data,
									beforeSend: function(){
								    	$('html').append( '<div class="notice_body"><div>' + Noo_Property_Admin.wait_txt + '</div></div>' );
								    	$_$.find('> span').addClass('spin').removeClass('hide');
								    },
								    complete: function(){

								    	$('html').find('.notice_body').remove();
								    	$_$.find('> span').removeClass('spin').addClass('hide');

								    	/**
								    	 * Add disable field
								    	 */
									    	$( '#' + id_form + ' .noo-setting-item-field').each(function(index, el) {
							
												var $$ = $(this);

												if ( $$.hasClass('disable') ) {
													$$.find('input, select, textarea').each(function(index, el) {
														$(this).prop( "disabled", true );
													});
												}
											});
								    }
								})

						});

				});

				$('.remove-field').each(function(index, el) {
					
					$(this).click(function(event) {
						
						var $$     = $(this),
							id     = $$.data('id'),
							label  = $$.data('label'),
							input  = $$.data('id-input');

						if ( $$.hasClass('disable') ) {
							
							$$.html(Noo_Property_Admin.enable_txt).removeClass('disable').addClass('enable');
							$('#' + input).val('1');
							$('#' + id).addClass('disable');
							$('#' + id).find('input, select, textarea').each(function(index, el) {
								$(this).prop( "disabled", true );
							});

						} else if ( $$.hasClass('enable') ) {
							
							$$.html(Noo_Property_Admin.disable_txt).removeClass('enable').addClass('disable');
							$('#' + input).val('');
							$('#' + id).removeClass('disable');

							$('#' + id).find('input, select, textarea').each(function(index, el) {
								$(this).prop( "disabled", false );
							});

						} else {
							$('#' + id).remove();
						}

					});

				});

				/**
				 * Check disable field
				 */
					if ( $('.noo-setting-item-field').length > 0 ) {
						$('.noo-setting-item-field').each(function(index, el) {
							
							var $$ = $(this);

							if ( $$.hasClass('disable') ) {
								$$.find('input, select, textarea').each(function(index, el) {
									$(this).prop( "disabled", true );
								});
							}
						});
					}

				$('.noo-setting-clone').on('click', '> span', function(event) {
					event.preventDefault();
					
					/**
					 * VAR
					 */
						var $$    = $(this),
							id    = $$.data('id'),
							clone_field = $('#' + id).find('.clone-field'),
							index = clone_field.data('index');

					/**
					 * L1: Clone field default
					 * L2: Find new field clone and remove class hide, clone-field
					 * L3: Set data index new to field default
					 */
						clone_field.clone().appendTo('.show-clone-field');
						$('.show-clone-field').find('.noo-setting-item-field').removeClass('hide clone-field').removeAttr('id');

						clone_field.data('index', index+1);

					/**
					 * Find element field clone and replace name
					 * If is type checkbox then find and replace id, label
					 */
						clone_field.find('input, select, textarea').each(function(i, e) {
							var name = $(this).attr('name'),
							    type = $(this).attr('type');

							if ( typeof name === 'undefined' || name === '' ) return;

							$(this).attr('name', (name.replace('[' + index + ']', '[' + (index + 1) + ']')));
							
							if ( typeof type !== 'undefined' && type === 'checkbox' ) {

								$(this).attr('id', 'switch-' + index);
								$(this).next('label').attr('for', 'switch-' + index);

							}

						});

					/**
					 * Find all type hidden of field clone and set value default is empty
					 */

						$('.show-clone-field').find('.noo-setting-item-field').find('[type="hidden"]').each(function(i, e) {
							$(this).attr('value', '');
						});

					/**
					 * Support drag element
					 */
						$( '.noo-setting-content' ).sortable();
					    $( '.noo-setting-content' ).disableSelection();

				});	

				$( '.noo-setting-content' ).sortable();
			    $( '.noo-setting-content' ).disableSelection();

			    $( ".noo-setting-content").on('click', 'input', function(event) {
			    	$(this).focus();
			    });

			}

		/**
		 * Process event when click tab setting
		 */
			if ( $('.noo-tab-setting').length > 0 ) {

				$('.noo-tab-setting').each(function(index, el) {
					
					var $$ = $(this);

					$('.noo-setting-form').hide();
					$('.noo-setting-form').first().show();

					$$.on('click', '.noo-tab-item', function(event) {
						event.preventDefault();
						/**
						 * VAR
						 */
							var $_$ = $(this),
								id  = $_$.data('id');

						/**
						 * Process event
						 */
							$$.find('.noo-tab-item').removeClass('active');
							$_$.addClass('active');

							$('.noo-setting-form').hide();
							$('#' + id).show();

					});

				});

			}

		/**
		 * Show tooltip
		 */
			if ( $('.noo-tooltip').length > 0 ) {

				$('.noo-tooltip').each(function(index, el) {
					
					var $$ = $(this),
						content = $$.data('content');

					$$.qtip({
					    content: content
					});

				});				

			}

		/**
		 * Process box login
		 */
			if ( $('#noo_agent_meta_box_user').length > 0 ) {

				var user_name = $('#noo_agent_meta_box_user').find('#user_name').val();

				if ( typeof user_name !== 'undefined' && user_name !== '' ) {
					$('#noo_agent_meta_box_user').find('#user_name').prop( "readonly", true );
				}

			}

		/**
		 * Process event when click disable google auto complete
		 */
			var noo_hide_disable_auto_complete = function() {
				
				if ( $('#disable_auto_complete').length > 0 ) {
					var disable_auto_complete = $( 'input[name="disable_auto_complete"]' ).val();
					if ( typeof disable_auto_complete === 'undefined' ) {

						$('.disable_auto_complete').hide();

					} else {

						$('.disable_auto_complete').show();

					}
					$('#disable_auto_complete').change(function() {
						
						if ( $(this).is(':checked') ) {
							
							$('.disable_auto_complete').hide();
							
						} else {

							$('.disable_auto_complete').show();
							
						}

					});

				}

			}
			noo_hide_disable_auto_complete();

		/**
		 * Process when click element help
		 */
		    if ( $('.noo-help').length > 0 ) {

		      $('.noo-help').each(function(index, el) {
		        
		        $(this).on('click', function(event) {
		          	event.preventDefault();

		            $(this).closest('div.notice').find('.content-help').toggle('slow');

		        });

		      });

		    }

		var clone_floor_plan = function() {

			$('#noo-item-floor_plan_wrap-wrap .noo-clone-floor-plan').on('click', '.add-floor-plan', function(event) {
				event.preventDefault();
				var btn_clone     = $(this),
					total         = btn_clone.data('total'),
					plan_id       = btn_clone.data('id'),
					content_clone = $('#clone_element').clone(true).html();

				content_clone = content_clone.replace( /\[0\]/g, '[' + (total+1) + ']' ).replace( /data-index="0"/g, 'data-index="' + (total+1) + '"' );
				$('.content-clone').append( '<div class="noo-floor-plans-wrap noo-md-12">' + content_clone + '</div>' );
				btn_clone.data( 'total', total+1 );
				upload_floor_plan_image();

			});

		}
		clone_floor_plan();


		var remove_floor_plan = function() {

			$('body').on('click', '.remove-floor-plan', function(event) {
				event.preventDefault();
				$(this).closest('.noo-floor-plans-wrap').remove();
				upload_floor_plan_image();
			});

		}
		remove_floor_plan();

		/**
		 * Clear image
		 */
		var clear_image_floor_plan = function( noo_clear_btn, plan_id ) {
            var gallery_state = 'gallery-library';
            // var noo_clear_btn = $(this);
            noo_clear_btn.hide();
            noo_clear_btn.closest('.noo-control').find('.' + plan_id + '_upload' ).attr('value', 'Add Images');
            noo_clear_btn.siblings('.' + plan_id + '_value' ).val('');
            noo_clear_btn.siblings('.' + plan_id + '_ids' ).val('');
            noo_clear_btn.siblings('.noo-thumb-wrapper').html('');
		}

		/**
		 * Process event upload floor plan image
		 */
		var upload_floor_plan_image = function() {

			if ( $('.noo-floor-plans-wrap').length > 0 ) {

				$('body').find('.noo-floor-plans-wrap').each(function(index, el) {
					
					var box_floor_plan  = $(this),
						data_floor_plan = box_floor_plan.find('.floor_plan_data'),
						gallery_state   = data_floor_plan.data('gallery-state'),
						plan_image      = data_floor_plan.data('plan-image'),
						plan_id         = data_floor_plan.data('plan-id');

                    // Hide the Clear Gallery button if there's no image.
                    if ( typeof plan_image == undefined || plan_image == '' ) {
	                    box_floor_plan.find('.' + plan_id + '_clear' ).hide();
                    }

					box_floor_plan.find('.' + plan_id + '_clear' ).on('click', function (event) {

	                    clear_image_floor_plan( $(this), plan_id );

	               	});

                    box_floor_plan.find('.' + plan_id + '_upload' ).on('click', function (event) {
                        event.preventDefault();

                        var noo_upload_btn = $(this);

                        // if media frame exists, reopen
                        if (wp_media_frame) {
                            wp_media_frame.setState(gallery_state);
                            wp_media_frame.open();
                            return;
                        }

                        // create new media frame
                        // I decided to create new frame every time to control the Library state as well as selected images
                        var wp_media_frame = wp.media.frames.wp_media_frame = wp.media({
                            title: 'NOO Gallery', // it has no effect but I really want to change the title
                            frame: "post",
                            toolbar: 'main-gallery',
                            state: gallery_state,
                            library: {type: 'image'},
                            multiple: true
                        });

                        // when open media frame, add the selected image to Gallery
                        wp_media_frame.on('open', function () {
                            var selected_ids = noo_upload_btn.siblings( '.' + plan_id + '_value' ).val();
                            if (!selected_ids)
                                return;
                            selected_ids = selected_ids.split(',');
                            var library = wp_media_frame.state().get('library');
                            selected_ids.forEach(function (id) {
                                var attachment = wp.media.attachment(parseInt(id));
                                attachment.fetch();
                                library.add(attachment ? [attachment] : []);
                            });
                        });

                        // when click Insert Gallery, run callback
                        wp_media_frame.on('update', function () {

                            var library = wp_media_frame.state().get('library');
                            var images = [];
                            var noo_thumb_wraper = noo_upload_btn.siblings('.noo-thumb-wrapper');
                            var thumb_index = noo_thumb_wraper.data('index');
                            noo_thumb_wraper.html('');

                            library.map(function (attachment) {
                                var attachment = attachment.toJSON();
                                images.push(attachment.id);
                                noo_thumb_wraper.append('<img src="' + attachment.url + '" alt="" /><input type="hidden" name="floor_plans[' + thumb_index + '][plan_image][]" value="' + attachment.id + '" />');
                            });

                            gallery_state = 'gallery-edit';

                            noo_upload_btn.siblings( '.' + plan_id + '_value' ).val(images.join(','));

                            noo_upload_btn.attr('value', 'Edit Gallery');
                            $('body').find('.' + plan_id + '_clear' ).css('display', 'inline-block');
                        });

                        // open media frame
                        wp_media_frame.open();
                    });

				});

			}

		}
		upload_floor_plan_image();

		$('.rp-select').chosen({
            width: '100%',
            disable_search_threshold: 10,
        });

	});

})( jQuery );